#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Agora v1.00
# python 2.7
# Copyright Â© 2016 IBENS/Dyogen : Matthieu MUFFATO, Alexandra Louis, Nga Thi tuy Nguyen, Joseph Lucas, Hugues ROEST CROLLIUS
# mail : hrc@ens.fr or alouis@biologie.ens.fr
# This is free software; you may copy, modify and/or distribute this work under the terms of the GNU General Public License, version 3 or later and the CeCiLL v2 license in France

__doc__ = """
	Rassemble les blocs de syntenie pairwise et cree des blocs integres
"""

import multiprocessing
import sys
import time

from joblib import Parallel, delayed

import utils.myFile
import utils.myGenomes
import utils.myGraph
import utils.myMaths
import utils.myPhylTree
import utils.myTools

# Arguments
arguments = utils.myTools.checkArgs(
	[("phylTree.conf",file), ("target",str), ("pairwiseDiags",str)],
	[("minimalWeight",int,1), ("searchLoops",bool,False),
	("OUT.ancDiags",str,"anc/diags.%s.list.bz2"),
	("ancGenesFiles",str,""),
	],
	__doc__
)

#def do(anc,diags):
def do(anc, diags, sto):
	sys.stdout = sys.stderr = utils.myFile.openFile(sto, "w")
		
	#singletons = set(xrange(len(utils.myGenomes.Genome(arguments["ancGenesFiles"] % phylTree.fileName[anc]).lstGenes[None])))
	g = utils.myGenomes.Genome(arguments["ancGenesFiles"] % phylTree.fileName[anc], withDict=False).lstGenes
	#singletons = set(xrange(len(g[None]) if None in g else len(g)))
	singletons = set(xrange(len(g[None]))) if None in g else set(g)

	print >> sys.stderr, "Blocs integres de %s ..." % anc,

	graph = utils.myGraph.WeightedDiagGraph()
	for x in diags:
		graph.addLink(*x)
	print "NEWANC", anc
	print graph
	graph.printIniGraph()

	# Coupe du graphe
	graph.cleanGraphTopDown(arguments["minimalWeight"], searchLoops=arguments["searchLoops"])

	f = utils.myFile.openFile(arguments["OUT.ancDiags"] % phylTree.fileName[anc], "w")
	s = []

	# Extraction des blocs integres
	for (d,dw) in graph.getBestDiags():

		if len(d) == 1:
			continue

		ds = [x[1] for x in d]
		da = [x[0] for x in d]

		s.append(len(da))
		singletons.difference_update(da)
		res = [anc, len(da), utils.myFile.myTSV.printLine(da," "), utils.myFile.myTSV.printLine(ds, " "), utils.myFile.myTSV.printLine(dw," ")]
		print >> f, utils.myFile.myTSV.printLine(res)

	for x in singletons:
		print >> f, utils.myFile.myTSV.printLine([anc, 1, x, 1, ""])
	f.close()
	print >> sys.stderr, utils.myMaths.myStats.txtSummary(s), "+ %d singletons OK" % len(singletons)
	

start = time.time()

# L'arbre phylogenetique
phylTree = utils.myPhylTree.PhylogeneticTree(arguments["phylTree.conf"])
targets = phylTree.getTargetsAnc(arguments["target"])

print >> sys.stderr, targets

n_cpu = multiprocessing.cpu_count()
#n_cpu = 1

Parallel(n_jobs=n_cpu)(delayed(do)(anc, utils.myGraph.loadConservedPairsAnc(arguments["pairwiseDiags"] % phylTree.fileName[anc]), "denovo_log/%s.log.bz2" % anc) for anc in targets)

#for anc in targets:
#	pairwiseDiags = utils.myGraph.loadConservedPairsAnc(arguments["pairwiseDiags"] % anc)
#	do(anc, pairwiseDiags)
	#do(anc, pairwiseDiags.pop(anc, []))

print >> sys.stderr, "Elapsed time:", (time.time() - start)
